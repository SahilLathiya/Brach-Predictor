#include "tage.hpp"

#include <map>

#include <ooo_cpu.h>

// TAGE defines
#define NUM_BANKS 4

#define BIMODAL_SIZE 4099
#define LEN_BIMODAL 2
#define BIMODAL_INDEX(pc) (pc % BIMODAL_SIZE)

#define LEN_GLOBAL 9
#define LEN_TAG 10
#define LEN_COUNTS 3
#define MIN_HISTORY_LEN 5
#define MAX_HISTORY_LEN 131

using MyTage = Tage<NUM_BANKS, BIMODAL_SIZE, LEN_BIMODAL, LEN_GLOBAL, LEN_TAG, LEN_COUNTS, MIN_HISTORY_LEN, MAX_HISTORY_LEN>;

namespace
{
std::map<O3_CPU*, MyTage> tage;
}

void O3_CPU::initialize_branch_predictor() { tage[this].tage_init(); }

uint8_t O3_CPU::predict_branch(uint64_t ip) { return tage[this].tage_predict(ip); }

void O3_CPU::last_branch_result(uint64_t ip, uint64_t branch_target, uint8_t taken, uint8_t branch_type) { tage_train(ip, taken); }
